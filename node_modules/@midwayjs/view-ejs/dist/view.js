"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EjsView = void 0;
const ejs = require("ejs");
const view_1 = require("@midwayjs/view");
const core_1 = require("@midwayjs/core");
let EjsView = class EjsView {
    async renderFile(filename, locals, config) {
        return new Promise((resolve, reject) => {
            ejs.renderFile(filename, locals, config, (err, result) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(result);
                }
            });
        });
    }
    async render(name, locals, options) {
        const config = Object.assign({}, this.ejsConfig, options, { name });
        const html = await this.renderFile(name, locals, config);
        if (!config.layout) {
            return html;
        }
        locals.body = html;
        const layout = await this.viewManager.resolve(config.layout);
        return this.renderFile(layout, locals, config);
    }
    async renderString(tpl, locals, options) {
        // should disable cache when no filename
        const config = Object.assign({}, this.ejsConfig, options, {
            cache: null,
        });
        try {
            return Promise.resolve(ejs.render(tpl, locals, config));
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
};
__decorate([
    (0, core_1.Config)('ejs'),
    __metadata("design:type", Object)
], EjsView.prototype, "ejsConfig", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", view_1.ViewManager)
], EjsView.prototype, "viewManager", void 0);
EjsView = __decorate([
    (0, core_1.Provide)()
], EjsView);
exports.EjsView = EjsView;
//# sourceMappingURL=view.js.map