"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vscodeSupport = exports.checkPort = exports.getType = exports.getFun = exports.waitDebug = exports.getWssUrl = exports.getDebugPath = exports.getRandomId = exports.getData = exports.onMessage = exports.sendData = void 0;
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
const net_1 = require("net");
const child_process_1 = require("child_process");
// 进程间传递数据
exports.sendData = (proc, result) => {
    const id = result && result.id || exports.getRandomId();
    const tmpData = path_1.join(os_1.tmpdir(), 'data' + id);
    fs_1.writeFileSync(tmpData, JSON.stringify(result));
    proc.send({ type: 'bigData', id, exitCode: result.exitCode });
};
// 处理消息
exports.onMessage = (proc, cb) => {
    proc.on('message', async (msg) => {
        if (msg && msg.type === 'bigData') {
            msg = exports.getData(msg.id);
        }
        cb(msg);
    });
};
// 进程间获取大数据
exports.getData = (id) => {
    const tmpData = path_1.join(os_1.tmpdir(), 'data' + id);
    return JSON.parse(fs_1.readFileSync(tmpData).toString());
};
// 获取随机Id
exports.getRandomId = (key) => {
    return Date.now() + Math.random() + (key || '');
};
exports.getDebugPath = () => {
    if (require.extensions['.ts']) {
        return {
            path: path_1.resolve(__dirname, './debug.ts'),
            extensions: ['-r', 'ts-node/register']
        };
    }
    return { path: path_1.resolve(__dirname, './debug.js') };
};
function getWssUrl(port, type, count) {
    return new Promise((resolve, reject) => {
        count = count || 0;
        if (count > 100) {
            return reject('timeout');
        }
        setTimeout(() => {
            const fetch = require('node-fetch');
            fetch('http://127.0.0.1:' + port + '/json/list')
                .then(res => res.json())
                .then(debugInfo => {
                const url = debugInfo[0][type || 'webSocketDebuggerUrl'] || '';
                const ret = url.replace('js_app.html?experiments=true&', 'inspector.html?');
                resolve(ret);
            })
                .catch(() => {
                getWssUrl(port, type, count + 1).then(resolve).catch(reject);
            });
        }, 100);
    });
}
exports.getWssUrl = getWssUrl;
function debugWs(addr) {
    return new Promise(resolve => {
        const WebSocket = require('ws');
        const ws = new WebSocket(addr);
        let currentId = 0;
        const cbMap = {};
        ws.on('open', () => {
            ws.on('message', message => {
                try {
                    message = JSON.parse(message);
                }
                catch (e) { }
                if (message.params) {
                    const id = message.params.scriptId;
                    if (id) {
                        if (id > currentId) {
                            currentId = id - 0;
                        }
                        if (cbMap[id]) {
                            cbMap[id](message.params);
                        }
                    }
                }
            });
            const send = (method, params) => {
                return new Promise(resolve2 => {
                    const curId = currentId + 1;
                    currentId = curId;
                    cbMap[curId] = data => {
                        resolve2(data);
                    };
                    const param = { id: curId, method };
                    if (params) {
                        param.params = params;
                    }
                    ws.send(JSON.stringify(param));
                });
            };
            send('Profiler.enable');
            send('Runtime.enable');
            send('Debugger.enable', { maxScriptsCacheSize: 10000000 });
            send('Debugger.setBlackboxPatterns', { patterns: ['internal'] });
            resolve(send);
        });
    });
}
async function waitDebug(port) {
    const wssUrl = await getWssUrl(port);
    return debugWs(wssUrl);
}
exports.waitDebug = waitDebug;
exports.getFun = (options) => {
    let fun = require(options.file);
    if (options.export) {
        fun = fun[options.export];
    }
    return (...args) => {
        return Promise.resolve(true).then(() => {
            return fun(...args);
        });
    };
};
exports.getType = (data) => {
    return ({}).toString.call(data).slice(8, -1).toLowerCase();
};
exports.checkPort = async (port) => {
    return new Promise(resolve => {
        const plat = os_1.platform();
        if (plat != 'win32') {
            try {
                const portUse = child_process_1.execSync(`lsof -i:${port}`).toString().replace(/\n$/, '').split('\n');
                if (portUse.length <= 1) {
                    return resolve(false);
                }
                portUse.shift();
                const findUse = portUse.find(proc => {
                    const procList = proc.split(/\s+/);
                    const last = procList.pop();
                    if (last === '(LISTEN)') {
                        return true;
                    }
                });
                if (findUse) {
                    return resolve(true);
                }
            }
            catch (_a) { }
        }
        const server = net_1.createServer(socket => {
            socket.write('check port\r\n');
            socket.pipe(socket);
        });
        setTimeout(() => {
            server.listen(port, '127.0.0.1');
        }, 100);
        server.on('error', () => {
            resolve(true);
        });
        server.on('listening', () => {
            server.close();
            resolve(false);
        });
    });
};
exports.vscodeSupport = (options) => {
    const isInVscode = process.env.TERM_PROGRAM === 'vscode';
    if (!isInVscode) {
        return;
    }
    let vscodeVersion = [];
    try {
        vscodeVersion = child_process_1.execSync('code -v').toString().split('\n')[0].split('.');
    }
    catch (_a) { }
    if (!vscodeVersion || !Array.isArray(vscodeVersion) || vscodeVersion.length < 3) {
        return;
    }
    const versionCount = vscodeVersion[0] * 100 + vscodeVersion[1];
    const cwd = (options === null || options === void 0 ? void 0 : options.cwd) || process.cwd();
    const vscodeSettingDir = path_1.join(cwd, '.vscode');
    if (!fs_1.existsSync(vscodeSettingDir)) {
        fs_1.mkdirSync(vscodeSettingDir);
    }
    let vscodeSettingFile = path_1.join(vscodeSettingDir, 'settings.json');
    let vscodeSettingJson = {};
    try {
        vscodeSettingJson = JSON.parse(fs_1.readFileSync(vscodeSettingFile).toString());
    }
    catch (_b) { }
    // 自动打开 autoAttach
    vscodeSettingJson['debug.node.autoAttach'] = 'on';
    // version 1.49.0 + 需要设置 usePreviewAutoAttach
    if (versionCount >= 149) {
        vscodeSettingJson['debug.javascript.usePreviewAutoAttach'] = false;
    }
    fs_1.writeFileSync(vscodeSettingFile, JSON.stringify(vscodeSettingJson, null, 2));
};
//# sourceMappingURL=data:application/json;base64,