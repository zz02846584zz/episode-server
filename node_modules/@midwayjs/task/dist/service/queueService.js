"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueService = void 0;
const core_1 = require("@midwayjs/core");
let QueueService = class QueueService {
    constructor() {
        this.queueMap = {};
        this.queueTaskMap = {};
        this.localTaskMap = {};
    }
    async execute(queueName, data, options = {}) {
        const queue = this.queueMap[`${queueName.name}:execute`];
        return await queue.add(data || {}, options);
    }
    getClassQueue(queueName) {
        return this.queueMap[`${queueName.name}:execute`];
    }
    getQueueTask(queueClass, queueName) {
        return this.queueTaskMap[`${queueClass}:${queueName}`];
    }
    getLocalTask(queueClass, queueName) {
        return this.localTaskMap[`${queueClass}:${queueName}`];
    }
    saveQueue(key, value) {
        this.queueMap[key] = value;
    }
    saveQueueTask(key, value) {
        this.queueTaskMap[key] = value;
    }
    saveLocalTask(key, value) {
        this.localTaskMap[key] = value;
    }
};
QueueService = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], QueueService);
exports.QueueService = QueueService;
//# sourceMappingURL=queueService.js.map