"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Locator = exports.ProjectType = void 0;
const fs_1 = require("fs");
const globby = require("globby");
const path_1 = require("path");
const util_1 = require("./util");
const whiltelist_1 = require("./whiltelist");
var ProjectType;
(function (ProjectType) {
    ProjectType["UNKNOWN"] = "unknown";
    ProjectType["MIDWAY"] = "midway";
    ProjectType["MIDWAY_FRONT_MONOREPO"] = "midway_front_monorepo";
    ProjectType["MIDWAY_FRONT_integration"] = "midway_front_integration";
    ProjectType["MIDWAY_FAAS"] = "midway_faas";
    ProjectType["MIDWAY_FAAS_FRONT_MONOREPO"] = "midway_faas_front_monorepo";
    ProjectType["MIDWAY_FAAS_FRONT_integration"] = "midway_faas_front_integration";
})(ProjectType = exports.ProjectType || (exports.ProjectType = {}));
const globOptions = {
    followSymbolicLinks: false,
    ignore: [
        '**/node_modules/**',
        '**/test/**',
        '**/run/**',
        '**/public/**',
        '**/build/**',
        '**/dist/**',
        '**/.serverless/**',
        '**/.faas_debug_tmp/**',
        'midway.config.ts',
        'vite.config.ts',
    ],
};
class Locator {
    constructor(cwd) {
        this.integrationProject = false;
        this.projectType = ProjectType.UNKNOWN;
        this.isMidwayProject = false;
        this.isMidwayFaaSProject = false;
        this.cwd = cwd || this.analyzeCWD();
    }
    async run(options = {}) {
        await this.formatOptions(options);
        this.tsCodeRoot = options.tsCodeRoot;
        this.tsBuildRoot = options.tsBuildRoot;
        await this.analyzeRoot();
        await this.analyzeTSCodeRoot();
        await this.analyzeTSBuildRoot();
        await this.analyzeIntegrationProject();
        await this.analyzeUsingDependencies();
        await this.analyzeUsingDependenciesVersion();
        return {
            cwd: this.cwd,
            midwayRoot: this.root,
            tsCodeRoot: this.tsCodeRoot,
            tsConfigFilePath: this.tsConfigFilePath,
            tsBuildRoot: this.tsBuildRoot,
            integrationProject: this.integrationProject,
            projectType: this.projectType,
            usingDependencies: this.usingDependencies,
            usingDependenciesVersion: this.usingDependenciesVersion,
        };
    }
    analyzeCWD() {
        return process.cwd();
    }
    async formatOptions(options) {
        const json = await util_1.safeReadJSON(path_1.join(this.cwd, 'package.json'));
        const integrationOptions = util_1.safeGetProperty(json, 'midway-integration') || {};
        if (!options.tsCodeRoot) {
            options.tsCodeRoot = integrationOptions.tsCodeRoot;
        }
        if (!options.tsBuildRoot) {
            options.tsBuildRoot = integrationOptions.tsBuildRoot;
        }
    }
    /**
     * 分析 midway 系列项目根目录
     */
    async analyzeRoot() {
        const tsConfig = await util_1.safeReadJSON(path_1.join(this.cwd, 'tsconfig.json'));
        if (tsConfig === null || tsConfig === void 0 ? void 0 : tsConfig.exclude) {
            globOptions.ignore.push(...tsConfig.exclude);
        }
        const paths = await globby(['**/package.json'], {
            ...globOptions,
            cwd: this.cwd,
            deep: 2,
        });
        // find midway root
        for (let pkgPath of paths) {
            const json = await util_1.safeReadJSON(path_1.join(this.cwd, pkgPath));
            let result = util_1.propertyExists(json, [
                'dependencies.midway',
                'dependencies.@ali/midway',
            ]);
            if (result) {
                this.isMidwayProject = true;
                this.root = path_1.dirname(path_1.join(this.cwd, pkgPath));
                break;
            }
            result = util_1.propertyExists(json, [
                'dependencies.@midwayjs/faas',
                'dependencies.@ali/midway-faas',
            ]);
            if (result) {
                this.isMidwayFaaSProject = true;
                this.root = path_1.dirname(path_1.join(this.cwd, pkgPath));
                break;
            }
        }
    }
    /**
     * 分析 ts 代码的根目录，比如 src，或者其他
     */
    async analyzeTSCodeRoot() {
        if (!this.root) {
            return;
        }
        if (this.tsCodeRoot) {
            this.tsCodeRoot = this.formatAbsolutePath(this.tsCodeRoot);
            return;
        }
        const paths = await globby(['**/*.ts', '!**/*.d.ts'], {
            ...globOptions,
            cwd: this.root,
        });
        const common = util_1.findCommonDir(paths);
        this.tsCodeRoot = path_1.join(this.root, common);
    }
    /**
     * 分析构建后的根目录
     */
    async analyzeTSBuildRoot() {
        if (!this.root || !this.tsCodeRoot) {
            return;
        }
        if (this.tsBuildRoot) {
            this.tsBuildRoot = this.formatAbsolutePath(this.tsBuildRoot);
        }
        this.tsConfigFilePath = await util_1.findFile([
            path_1.join(this.tsCodeRoot, 'tsconfig.json'),
            path_1.join(this.root, 'tsconfig.json'),
            path_1.join(this.cwd, 'tsconfig.json'),
        ]);
        if (this.tsConfigFilePath && !this.tsBuildRoot) {
            const tsConfig = await util_1.safeReadJSON(this.tsConfigFilePath);
            const distDir = util_1.safeGetProperty(tsConfig, 'compilerOptions.outDir');
            if (distDir) {
                this.tsBuildRoot = path_1.join(path_1.dirname(this.tsConfigFilePath), distDir);
            }
        }
    }
    /**
     * 分析用到的依赖
     */
    async analyzeUsingDependencies() {
        if (!this.root || !this.tsCodeRoot)
            return;
        if (this.integrationProject) {
            // 一体化项目，需要分析函数用到的依赖
            const dependencies = new Set();
            const paths = await globby(['**/*.ts', '**/*.js', '!**/*.d.ts'], {
                ...globOptions,
                cwd: this.tsCodeRoot,
            });
            for (const p of paths) {
                try {
                    const file = path_1.join(this.tsCodeRoot, p);
                    const ext = path_1.extname(file);
                    const isJSX = ext === '.tsx' || ext === '.jsx' || ext === '.js';
                    const result = util_1.findDependenciesByAST(fs_1.readFileSync(file, 'utf-8'), isJSX);
                    result.forEach((module) => {
                        util_1.filterModule(module, dependencies);
                    });
                }
                catch (err) {
                    console.error(`"${p}" find dependencies and parse error, err="${err.message}"`);
                }
            }
            this.usingDependencies = Array.from(dependencies.values());
            const json = await util_1.safeReadJSON(path_1.join(this.root, 'package.json'));
            const pkgDeps = json['dependencies'] || [];
            this.usingDependencies = whiltelist_1.includeDependencies(this.usingDependencies, pkgDeps);
        }
        else {
            const json = await util_1.safeReadJSON(path_1.join(this.root, 'package.json'));
            const dependencies = json['dependencies'] || [];
            this.usingDependencies = Object.keys(dependencies);
        }
    }
    async analyzeUsingDependenciesVersion() {
        if (!this.root || !this.tsCodeRoot || !this.usingDependencies)
            return;
        const json = await util_1.safeReadJSON(path_1.join(this.root, 'package.json'));
        const dependencies = json['dependencies'] || [];
        const dependenciesVersion = {
            valid: {},
            unValid: [],
        };
        this.usingDependencies.forEach((depName) => {
            if (dependencies[depName]) {
                dependenciesVersion.valid[depName] = dependencies[depName];
            }
            else {
                dependenciesVersion.unValid.push(depName);
            }
        });
        this.usingDependenciesVersion = dependenciesVersion;
    }
    async analyzeIntegrationProject() {
        if (!this.root)
            return;
        // 当前目录不等于 midway 根目录，对等视图
        if (this.cwd !== this.root) {
            if (this.isMidwayProject) {
                this.projectType = ProjectType.MIDWAY_FRONT_MONOREPO;
            }
            else {
                this.projectType = ProjectType.MIDWAY_FAAS_FRONT_MONOREPO;
            }
            return;
        }
        // 全 ts 版本，前后端代码可能在一起，前端视图的情况
        // rax/ice 等
        let isIntegration = [
            'src/pages',
            'src/index.tsx',
            'src/index.scss',
            'src/index.less',
        ].find((name) => {
            return fs_1.existsSync(path_1.join(this.root, name));
        });
        if (!isIntegration && fs_1.existsSync(path_1.join(this.root, 'midway.config.ts'))) {
            const pkgJson = await util_1.safeReadJSON(path_1.join(this.root, 'package.json'));
            isIntegration = ['react', 'vue', 'rax'].find(depName => {
                var _a, _b;
                return ((_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.dependencies) === null || _a === void 0 ? void 0 : _a[depName]) || ((_b = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.devDependencies) === null || _b === void 0 ? void 0 : _b[depName]);
            });
        }
        if (isIntegration) {
            this.integrationProject = true;
            if (this.isMidwayProject) {
                this.projectType = ProjectType.MIDWAY_FRONT_integration;
            }
            else {
                this.projectType = ProjectType.MIDWAY_FAAS_FRONT_integration;
            }
            return;
        }
        // 剩下可能就是纯应用
        if (this.isMidwayProject) {
            this.projectType = ProjectType.MIDWAY;
        }
        else if (this.isMidwayFaaSProject) {
            this.projectType = ProjectType.MIDWAY_FAAS;
        }
    }
    formatAbsolutePath(p) {
        if (!path_1.isAbsolute(p)) {
            return path_1.join(this.root, p);
        }
        return p;
    }
}
exports.Locator = Locator;
//# sourceMappingURL=data:application/json;base64,