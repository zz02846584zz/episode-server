export declare class FileStreamRotator {
    /**
     * Returns frequency metadata
     * @param frequency
     * @returns {*}
     */
    getFrequency(frequency: any): false | {
        type: any;
        digit: number;
    };
    /**
     * Returns a number based on the option string
     * @param size
     * @returns {Number}
     */
    parseFileSize(size: any): number;
    /**
     * Returns date string for a given format / date_format
     * @param format
     * @param date_format
     * @param {boolean} utc
     * @returns {string}
     */
    getDate(format: any, date_format: any, utc: any): string;
    /**
     * Read audit json object from disk or return new object or null
     * @param max_logs
     * @param audit_file
     * @param log_file
     * @returns {Object} auditLogSettings
     * @property {Object} auditLogSettings.keep
     * @property {Boolean} auditLogSettings.keep.days
     * @property {Number} auditLogSettings.keep.amount
     * @property {String} auditLogSettings.auditLog
     * @property {Array} auditLogSettings.files
     */
    setAuditLog(max_logs: any, audit_file: any, log_file: any): any;
    /**
     * Write audit json object to disk
     * @param {Object} audit
     * @param {Object} audit.keep
     * @param {Boolean} audit.keep.days
     * @param {Number} audit.keep.amount
     * @param {String} audit.auditLog
     * @param {Array} audit.files
     * @param {String} audit.hashType
     */
    writeAuditLog(audit: any): void;
    /**
     * Write audit json object to disk
     * @param {String} logfile
     * @param {Object} audit
     * @param {Object} audit.keep
     * @param {Boolean} audit.keep.days
     * @param {Number} audit.keep.amount
     * @param {String} audit.auditLog
     * @param {String} audit.hashType
     * @param {Array} audit.files
     * @param {EventEmitter} stream
     */
    addLogToAudit(logfile: any, audit: any, stream: any): any;
    /**
     *
     * @param options
     * @param options.filename
     * @param options.frequency
     * @param options.date_format
     * @param options.size
     * @param options.max_logs
     * @param options.audit_file
     * @param options.file_options
     * @param options.utc
     * @param options.extension
     * @param options.create_symlink
     * @param options.symlink_name
     * @returns {Object} stream
     */
    getStream(options: {
        filename: string;
        frequency?: string;
        size?: string;
        max_logs?: number | string;
        end_stream?: boolean;
        /**
         * File extension to be added at the end of the filename
         */
        extension?: string;
        create_symlink?: boolean;
        date_format?: string;
        audit_file?: string;
        symlink_name?: string;
        utc?: boolean;
        file_options?: any;
        /**
         * Hash to be used to add to the audit log (md5, sha256)
         */
        audit_hash_type?: string;
    }): any;
}
//# sourceMappingURL=fileStreamRotator.d.ts.map