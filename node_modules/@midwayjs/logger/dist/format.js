"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customJSON = exports.displayLabels = exports.displayCommonMessage = void 0;
const winston_1 = require("winston");
const constant_1 = require("./constant");
function removeProperty(o, p) {
    if (p in o) {
        delete o[p];
    }
}
exports.displayCommonMessage = (0, winston_1.format)((info, opts) => {
    var _a, _b;
    if (!info.pid) {
        info.pid = process.pid;
    }
    if (info[constant_1.ORIGIN_ERROR]) {
        info.originError = info[constant_1.ORIGIN_ERROR];
    }
    if (info[constant_1.ORIGIN_ARGS]) {
        info.originArgs = info[constant_1.ORIGIN_ARGS];
    }
    if (!info.ignoreFormat) {
        info.ignoreFormat = false;
    }
    if (!info.ctx) {
        info.ctx = null;
    }
    if (!info.format) {
        info.format = null;
    }
    if (!info.LEVEL) {
        info.LEVEL = info.level.toUpperCase();
    }
    if (!info.defaultLabel) {
        info.defaultLabel =
            opts.defaultLabel || ((_a = opts.target) === null || _a === void 0 ? void 0 : _a.getDefaultLabel()) || '';
    }
    return Object.assign(info, opts.defaultMeta || ((_b = opts.target) === null || _b === void 0 ? void 0 : _b.getDefaultMeta()) || {});
});
function joinLoggerLabel(labelSplit, ...labels) {
    if (labels.length === 0) {
        return '';
    }
    else {
        const newLabels = labels.filter(label => {
            return !!label;
        });
        if (newLabels.length === 0) {
            return '';
        }
        else {
            return `[${newLabels.join(labelSplit)}] `;
        }
    }
}
exports.displayLabels = (0, winston_1.format)((info, opts) => {
    opts.labelSplit = opts.labelSplit || ':';
    info.labelText = joinLoggerLabel(opts.labelSplit, info.defaultLabel, ...[].concat(info.label));
    return info;
});
exports.customJSON = (0, winston_1.format)((info, opts) => {
    var _a, _b, _c, _d;
    const meta = {};
    if (info[constant_1.ORIGIN_ERROR]) {
        meta.originError = info[constant_1.ORIGIN_ERROR];
    }
    removeProperty(info, 'originError');
    if (info[constant_1.ORIGIN_ARGS]) {
        meta.originArgs = info[constant_1.ORIGIN_ARGS];
    }
    removeProperty(info, 'originArgs');
    meta.ignoreFormat = (_a = info.ignoreFormat) !== null && _a !== void 0 ? _a : false;
    removeProperty(info, 'ignoreFormat');
    meta.ctx = (_b = info.ctx) !== null && _b !== void 0 ? _b : null;
    removeProperty(info, 'ctx');
    // meta.format = info.format ?? null;
    removeProperty(info, 'format');
    meta.LEVEL = (_c = info.LEVEL) !== null && _c !== void 0 ? _c : info.level.toUpperCase();
    removeProperty(info, 'LEVEL');
    meta.level = info.level;
    info.level = meta.LEVEL;
    meta.pid = info.pid;
    removeProperty(info, 'pid');
    removeProperty(info, 'label');
    removeProperty(info, 'labelText');
    removeProperty(info, 'defaultLabel');
    const jsonFormat = info.jsonFormat || opts.jsonFormat;
    removeProperty(info, 'jsonFormat');
    if (jsonFormat) {
        return (_d = jsonFormat(info, meta)) !== null && _d !== void 0 ? _d : info;
    }
    else {
        return info;
    }
});
//# sourceMappingURL=format.js.map