import { ILogger, LoggerLevel, LoggerOptions } from './interface';
export declare class MidwayLoggerContainer extends Map<string, ILogger> {
    private containerOptions;
    private loggerOriginData;
    private containerLoggerData;
    private aliasMap;
    constructor(options?: LoggerOptions);
    createLogger(name: string, options: LoggerOptions): ILogger;
    addLogger(name: string, logger: ILogger, errorWhenReplace?: boolean): ILogger;
    getLogger(name: string): ILogger;
    removeLogger(name: string): void;
    get(name: any): ILogger;
    /**
     * Closes a `Logger` instance with the specified `name` if it exists.
     * If no `name` is supplied then all Loggers are closed.
     * @param {?string} name - The id of the Logger instance to close.
     * @returns {undefined}
     */
    close(name?: string): void;
    updateContainerOption(options: LoggerOptions): void;
    reset(): void;
    private setLoggerOriginData;
    private syncOriginStatus;
    disableConsole(): void;
    disableFile(): void;
    disableError(): void;
    updateLevel(level: LoggerLevel): void;
    updateConsoleLevel(level: LoggerLevel): void;
    updateFileLevel(level: LoggerLevel): void;
    restore(): void;
    getDefaultMidwayLoggerConfig(appInfo: {
        pkg: Record<string, any>;
        name: string;
        baseDir: string;
        appDir: string;
        HOME: string;
        root: string;
        env: string;
    }): {
        midwayLogger: {
            default: {
                dir: string;
                level: string;
                consoleLevel: string;
                auditFileDir: string;
            };
            clients: {
                coreLogger: {
                    level: string;
                    fileLogName: string;
                };
                appLogger: {
                    fileLogName: string;
                    aliasName: string;
                };
            };
        };
    };
}
//# sourceMappingURL=container.d.ts.map