import { ChildLoggerOptions, ContextLoggerOptions, IMidwayLogger, LoggerCustomInfoHandler, LoggerLevel, LoggerOptions } from '../interface';
import { WinstonLogger } from '../winston/logger';
import { MidwayContextLogger } from './contextLogger';
export declare function isPlainObject(value: any): boolean;
/**
 *  base logger with console transport and file transport
 */
export declare class MidwayBaseLogger extends WinstonLogger implements IMidwayLogger {
    protected level: LoggerLevel;
    private consoleTransport;
    private fileTransport;
    private errTransport;
    private jsonTransport;
    private loggerOptions;
    private defaultLabel;
    private defaultMetadata;
    private customInfoHandler;
    private defaultPrintFormat;
    constructor(options?: LoggerOptions);
    protected log(level: any, ...args: any[]): any;
    disableConsole(): void;
    enableConsole(): void;
    disableFile(): void;
    enableFile(): void;
    disableError(): void;
    enableError(): void;
    enableJSON(): void;
    isEnableFile(): boolean;
    isEnableConsole(): boolean;
    isEnableError(): boolean;
    getConsoleLevel(): LoggerLevel;
    getFileLevel(): LoggerLevel;
    updateLevel(level: LoggerLevel): void;
    updateFileLevel(level: LoggerLevel): void;
    updateConsoleLevel(level: LoggerLevel): void;
    updateDefaultLabel(defaultLabel: string): void;
    updateDefaultMeta(defaultMetadata: Record<string, unknown>): void;
    /**
     * @deprecated
     * @param customInfoHandler
     */
    updateTransformableInfo(customInfoHandler: LoggerCustomInfoHandler): void;
    protected getDefaultFormat(): import("logform").Format;
    private getDefaultPrint;
    getDefaultLabel(): string;
    getDefaultMeta(): Record<string, unknown>;
    write(...args: any[]): any;
    add(transport: any): any;
    remove(transport: any): any;
    close(): any;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    verbose(...args: any[]): void;
    silly(...args: any[]): void;
    getLoggerOptions(): LoggerOptions;
    createChildLogger(options?: ChildLoggerOptions): any;
    createContextLogger<CTX>(ctx: CTX, options?: ContextLoggerOptions): MidwayContextLogger<CTX>;
}
//# sourceMappingURL=logger.d.ts.map