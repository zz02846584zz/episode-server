"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayBaseLogger = exports.isPlainObject = void 0;
const winston_1 = require("winston");
const rotate_1 = require("../transport/rotate");
const transport_1 = require("../transport");
const format_1 = require("../format");
const os = require("os");
const path_1 = require("path");
const util = require("util");
const constant_1 = require("../constant");
const logger_1 = require("../winston/logger");
const util_1 = require("../util");
const child_1 = require("./child");
const contextLogger_1 = require("./contextLogger");
const isWindows = os.platform() === 'win32';
function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== '[object Object]') {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.prototype;
}
exports.isPlainObject = isPlainObject;
const midwayLogLevels = {
    none: 0,
    error: 1,
    trace: 2,
    warn: 3,
    info: 4,
    verbose: 5,
    debug: 6,
    silly: 7,
    all: 8,
};
function getMaxSize(...args) {
    for (let i = 0; i <= args.length; i++) {
        if (args[i] === undefined) {
            continue;
        }
        return args[i];
    }
    return null;
}
/**
 *  base logger with console transport and file transport
 */
class MidwayBaseLogger extends logger_1.WinstonLogger {
    constructor(options = {}) {
        var _a;
        super(Object.assign(options, {
            levels: midwayLogLevels,
        }));
        this.defaultMetadata = {};
        this.customInfoHandler = info => {
            return info;
        };
        this.defaultPrintFormat = (info) => {
            return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;
        };
        if (isWindows) {
            options.disableErrorSymlink = true;
            options.disableFileSymlink = true;
        }
        this.loggerOptions = options;
        if (this.loggerOptions.defaultLabel) {
            this.defaultLabel = this.loggerOptions.defaultLabel;
        }
        if (this.loggerOptions.defaultMeta) {
            this.defaultMetadata = this.loggerOptions.defaultMeta;
        }
        this.configure({
            format: this.getDefaultFormat(),
            exitOnError: false,
        });
        // add console log transport
        if (options.enableConsole !== false && options.disableConsole !== true) {
            this.enableConsole();
        }
        options.dir = options.dir || process.cwd();
        if (options.auditFileDir && !(0, path_1.isAbsolute)(options.auditFileDir)) {
            options.auditFileDir = (0, path_1.join)(options.dir, options.auditFileDir);
        }
        // add file log transport
        if (options.enableFile !== false && options.disableFile !== true) {
            (0, util_1.assertEmptyAndThrow)(options.fileLogName, '[logger]: Please set fileLogName when enable file log');
            if ((0, path_1.isAbsolute)(options.fileLogName)) {
                options.dir = (0, path_1.dirname)(options.fileLogName);
                options.fileLogName = (0, path_1.basename)(options.fileLogName);
            }
            this.enableFile();
        }
        // add error log transport
        if (options.enableError !== false && options.disableError !== true) {
            options.errorLogName = options.errorLogName || 'common-error.log';
            if ((0, path_1.isAbsolute)(options.errorLogName)) {
                options.errorDir = (0, path_1.dirname)(options.errorLogName);
                options.errorLogName = (0, path_1.basename)(options.errorLogName);
            }
            this.enableError();
        }
        // add json log transport
        if (options.enableJSON === true) {
            options.jsonLogName =
                (_a = options.jsonLogName) !== null && _a !== void 0 ? _a : (0, util_1.formatJsonLogName)(options.fileLogName);
            (0, util_1.assertEmptyAndThrow)(options.jsonLogName, '[logger]: Please set jsonLogName when enable output json');
            this.enableJSON();
        }
        this.add(new transport_1.EmptyTransport());
    }
    log(level, ...args) {
        const originArgs = [...args];
        let meta, msg;
        if (args.length > 1 && isPlainObject(args[args.length - 1])) {
            meta = args.pop();
        }
        else {
            meta = {};
        }
        const last = args.pop();
        if (last instanceof Error) {
            msg = util.format(...args, last);
            meta[constant_1.ORIGIN_ERROR] = last;
        }
        else {
            msg = util.format(...args, last);
        }
        meta[constant_1.ORIGIN_ARGS] = originArgs;
        return super.log(level, msg, meta);
    }
    disableConsole() {
        this.remove(this.consoleTransport);
    }
    enableConsole() {
        if (!this.consoleTransport) {
            this.consoleTransport = new winston_1.transports.Console({
                level: (0, util_1.formatLevel)(this.loggerOptions.consoleLevel || this.loggerOptions.level || 'silly'),
                format: process.env.MIDWAY_LOGGER_DISABLE_COLORS !== 'true'
                    ? winston_1.format.combine(this.getDefaultPrint(), winston_1.format.colorize({
                        all: true,
                        colors: {
                            none: 'reset',
                            error: 'red',
                            trace: 'reset',
                            warn: 'yellow',
                            info: 'reset',
                            verbose: 'reset',
                            debug: 'blue',
                            silly: 'reset',
                            all: 'reset',
                        },
                    }))
                    : this.getDefaultPrint(),
            });
        }
        this.add(this.consoleTransport);
    }
    disableFile() {
        this.remove(this.fileTransport);
    }
    enableFile() {
        if (!this.fileTransport) {
            this.fileTransport = new rotate_1.DailyRotateFileTransport({
                dirname: this.loggerOptions.dir,
                filename: this.loggerOptions.fileLogName,
                datePattern: this.loggerOptions.fileDatePattern ||
                    this.loggerOptions.datePattern ||
                    'YYYY-MM-DD',
                level: (0, util_1.formatLevel)(this.loggerOptions.fileLevel || this.loggerOptions.level || 'silly'),
                createSymlink: (0, util_1.assertConditionTruthy)(this.loggerOptions.disableFileSymlink, this.loggerOptions.disableSymlink),
                symlinkName: this.loggerOptions.fileLogName,
                maxSize: getMaxSize(this.loggerOptions.fileMaxSize, this.loggerOptions.maxSize, '200m'),
                maxFiles: this.loggerOptions.fileMaxFiles ||
                    this.loggerOptions.maxFiles ||
                    '31d',
                eol: this.loggerOptions.eol || os.EOL,
                zippedArchive: this.loggerOptions.fileZippedArchive ||
                    this.loggerOptions.zippedArchive,
                format: this.getDefaultPrint(),
                auditFileDir: this.loggerOptions.auditFileDir,
                options: this.loggerOptions.fileOptions,
            });
        }
        this.add(this.fileTransport);
    }
    disableError() {
        this.remove(this.errTransport);
    }
    enableError() {
        if (!this.errTransport) {
            this.errTransport = new rotate_1.DailyRotateFileTransport({
                dirname: this.loggerOptions.errorDir || this.loggerOptions.dir,
                filename: this.loggerOptions.errorLogName,
                datePattern: this.loggerOptions.errDatePattern ||
                    this.loggerOptions.datePattern ||
                    'YYYY-MM-DD',
                level: 'error',
                createSymlink: (0, util_1.assertConditionTruthy)(this.loggerOptions.disableErrorSymlink, this.loggerOptions.disableSymlink),
                symlinkName: this.loggerOptions.errorLogName,
                maxSize: getMaxSize(this.loggerOptions.errMaxSize, this.loggerOptions.maxSize, '200m'),
                maxFiles: this.loggerOptions.errMaxFiles ||
                    this.loggerOptions.maxFiles ||
                    '31d',
                eol: this.loggerOptions.eol || os.EOL,
                zippedArchive: this.loggerOptions.errZippedArchive ||
                    this.loggerOptions.zippedArchive,
                format: this.getDefaultPrint(),
                auditFileDir: this.loggerOptions.auditFileDir,
                options: this.loggerOptions.fileOptions,
            });
        }
        this.add(this.errTransport);
    }
    enableJSON() {
        if (!this.jsonTransport) {
            this.jsonTransport = new rotate_1.DailyRotateFileTransport({
                format: winston_1.format.combine((0, format_1.customJSON)({
                    jsonFormat: this.loggerOptions.jsonFormat,
                }), winston_1.format.json()),
                dirname: this.loggerOptions.jsonDir || this.loggerOptions.dir,
                filename: this.loggerOptions.jsonLogName,
                datePattern: this.loggerOptions.jsonDatePattern ||
                    this.loggerOptions.datePattern ||
                    'YYYY-MM-DD',
                level: (0, util_1.formatLevel)(this.loggerOptions.jsonLevel || this.loggerOptions.level || 'silly'),
                createSymlink: (0, util_1.assertConditionTruthy)(this.loggerOptions.disableJSONSymlink, this.loggerOptions.disableSymlink),
                symlinkName: this.loggerOptions.jsonLogName,
                maxSize: getMaxSize(this.loggerOptions.jsonMaxSize, this.loggerOptions.maxSize, '200m'),
                maxFiles: this.loggerOptions.jsonMaxFiles ||
                    this.loggerOptions.maxFiles ||
                    '31d',
                eol: this.loggerOptions.jsonEol || os.EOL,
                zippedArchive: this.loggerOptions.jsonZippedArchive ||
                    this.loggerOptions.zippedArchive,
                auditFileDir: this.loggerOptions.auditFileDir,
                options: this.loggerOptions.fileOptions,
            });
        }
        this.add(this.jsonTransport);
    }
    isEnableFile() {
        return !!this.fileTransport;
    }
    isEnableConsole() {
        return !!this.consoleTransport;
    }
    isEnableError() {
        return !!this.errTransport;
    }
    getConsoleLevel() {
        return this.consoleTransport.level;
    }
    getFileLevel() {
        return this.fileTransport.level;
    }
    updateLevel(level) {
        this.level = (0, util_1.formatLevel)(level);
        this.consoleTransport.level = level;
        this.fileTransport.level = level;
    }
    updateFileLevel(level) {
        this.fileTransport.level = (0, util_1.formatLevel)(level);
    }
    updateConsoleLevel(level) {
        this.consoleTransport.level = (0, util_1.formatLevel)(level);
    }
    updateDefaultLabel(defaultLabel) {
        this.defaultLabel = defaultLabel;
    }
    updateDefaultMeta(defaultMetadata) {
        this.defaultMetadata = defaultMetadata;
    }
    /**
     * @deprecated
     * @param customInfoHandler
     */
    updateTransformableInfo(customInfoHandler) {
        this.customInfoHandler = customInfoHandler;
    }
    getDefaultFormat() {
        return winston_1.format.combine(winston_1.format.timestamp({
            format: 'YYYY-MM-DD HH:mm:ss,SSS',
        }), winston_1.format.splat(), (0, format_1.displayCommonMessage)({
            target: this,
        }), (0, format_1.displayLabels)());
    }
    getDefaultPrint() {
        return winston_1.format.printf(info => {
            if (info.ignoreFormat) {
                return info.message;
            }
            const newInfo = this.customInfoHandler(info);
            const printInfo = newInfo.format ||
                this.loggerOptions.format ||
                this.loggerOptions.printFormat ||
                this.defaultPrintFormat;
            return printInfo(newInfo || info);
        });
    }
    getDefaultLabel() {
        return this.defaultLabel;
    }
    getDefaultMeta() {
        return this.defaultMetadata;
    }
    write(...args) {
        if ((args.length === 1 && typeof args[0] !== 'object') ||
            !args[0]['level']) {
            // 这里必须要用 none
            return super.log.apply(this, ['trace', ...args, { ignoreFormat: true }]);
        }
        else {
            return super.write.apply(this, args);
        }
    }
    add(transport) {
        return super.add(transport);
    }
    remove(transport) {
        return super.remove(transport);
    }
    close() {
        return super.close();
    }
    debug(...args) {
        this.log('debug', ...args);
    }
    info(...args) {
        this.log('info', ...args);
    }
    warn(...args) {
        this.log('warn', ...args);
    }
    error(...args) {
        this.log('error', ...args);
    }
    verbose(...args) {
        this.log('verbose', ...args);
    }
    silly(...args) {
        this.log('silly', ...args);
    }
    getLoggerOptions() {
        return this.loggerOptions;
    }
    createChildLogger(options = {}) {
        return new child_1.MidwayChildLogger(this, {
            ...this.getLoggerOptions(),
            ...options,
        });
    }
    createContextLogger(ctx, options = {}) {
        return new contextLogger_1.MidwayContextLogger(ctx, this, {
            ...this.getLoggerOptions(),
            ...options,
        });
    }
}
exports.MidwayBaseLogger = MidwayBaseLogger;
//# sourceMappingURL=logger.js.map