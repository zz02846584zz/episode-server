"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDevelopmentEnvironment = exports.assertConditionTruthy = exports.assertEmptyAndThrow = exports.formatJsonLogName = exports.formatLevel = exports.debounce = void 0;
function debounce(func, wait, immediate) {
    let timeout, args, context, timestamp, result;
    if (null == wait)
        wait = 100;
    function later() {
        const last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
            timeout = setTimeout(later, wait - last);
        }
        else {
            timeout = null;
            if (!immediate) {
                result = func.apply(context, args);
                context = args = null;
            }
        }
    }
    const debounced = (...args) => {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        context = this;
        timestamp = Date.now();
        const callNow = immediate && !timeout;
        if (!timeout)
            timeout = setTimeout(later, wait);
        if (callNow) {
            result = func.apply(context, args);
            context = args = null;
        }
        return result;
    };
    debounced.clear = () => {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    };
    debounced.flush = () => {
        if (timeout) {
            result = func.apply(context, args);
            context = args = null;
            clearTimeout(timeout);
            timeout = null;
        }
    };
    return debounced;
}
exports.debounce = debounce;
function formatLevel(level) {
    return level.toLowerCase();
}
exports.formatLevel = formatLevel;
function formatJsonLogName(name) {
    if (name === null || name === undefined) {
        return name;
    }
    if (/\.log$/.test(name)) {
        return name.replace('.log', '.json.log');
    }
    else if (/\.$/.test(name)) {
        return name + 'json.log';
    }
    else {
        return name + '.json.log';
    }
}
exports.formatJsonLogName = formatJsonLogName;
function assertEmptyAndThrow(name, message) {
    if (name === null || name === undefined) {
        throw new Error(message);
    }
}
exports.assertEmptyAndThrow = assertEmptyAndThrow;
/**
 * 只要有一个 false 就返回 true
 * 默认为 undefined, null, false 时返回 true
 * @param args
 */
function assertConditionTruthy(...args) {
    if (args && args.length) {
        for (const param of args) {
            if (param !== true) {
                continue;
            }
            else {
                return false;
            }
        }
    }
    return true;
}
exports.assertConditionTruthy = assertConditionTruthy;
const isDevelopmentEnvironment = env => {
    return ['local', 'test', 'unittest'].includes(env);
};
exports.isDevelopmentEnvironment = isDevelopmentEnvironment;
//# sourceMappingURL=util.js.map