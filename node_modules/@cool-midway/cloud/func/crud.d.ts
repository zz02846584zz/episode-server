import { CloudReq } from './../interface';
import { IMidwayApplication } from '@midwayjs/core';
import { CoolConfig, CoolEventManager, CurdOption } from '@cool-midway/core';
import { Repository, SelectQueryBuilder } from 'typeorm';
import { CoolCloudDb } from '../db';
export declare abstract class CloudCrud {
    ctx: any;
    curdOption: CurdOption;
    coolCloudDb: CoolCloudDb;
    coolConfig: CoolConfig;
    entity: Repository<any>;
    app: IMidwayApplication;
    req: CloudReq;
    coolEventManager: CoolEventManager;
    protected sqlParams: any;
    setCurdOption(curdOption: CurdOption): void;
    /**
     * 设置实体
     * @param entityModel
     */
    setEntity(): Promise<void>;
    abstract main(req: CloudReq): Promise<void>;
    init(req: CloudReq): Promise<void>;
    /**
     * 参数安全性检查
     * @param params
     */
    paramSafetyCheck(params: any): Promise<boolean>;
    /**
     * 非分页查询
     * @param query 查询条件
     * @param option 查询配置
     */
    list(query: any): Promise<any>;
    /**
     * 执行SQL并获得分页数据
     * @param sql 执行的sql语句
     * @param query 分页查询条件
     * @param autoSort 是否自动排序
     */
    sqlRenderPage(sql: any, query: any, autoSort?: boolean): Promise<{
        list: any;
        pagination: {
            page: number;
            size: number;
            total: number;
        };
    }>;
    /**
     * 分页查询
     * @param connectionName 连接名
     */
    page(query: any): Promise<{
        list: any;
        pagination: {
            page: number;
            size: number;
            total: number;
        };
    }>;
    /**
     * 获得查询个数的SQL
     * @param sql
     */
    getCountSql(sql: any): string;
    /**
     * 操作entity获得分页数据，不用写sql
     * @param find QueryBuilder
     * @param query
     * @param autoSort
     * @param connectionName
     */
    entityRenderPage(find: SelectQueryBuilder<any>, query: any, autoSort?: boolean): Promise<{
        list: any[];
        pagination: {
            page: number;
            size: number;
            total: number;
        };
    }>;
    /**
     * 检查排序
     * @param sort 排序
     * @returns
     */
    private checkSort;
    /**
     * 原生查询
     * @param sql
     * @param params
     */
    nativeQuery(sql: any, params?: any): Promise<any>;
    /**
     * 获得ORM管理
     *  @param connectionName 连接名称
     */
    getOrmManager(): import("../db/source").CoolDataSource;
    private before;
    /**
     * 插入参数值
     * @param curdOption 配置
     */
    private insertParam;
    /**
     * 新增|修改|删除 之后的操作
     * @param data 对应数据
     */
    modifyAfter(data: any, type: 'delete' | 'update' | 'add'): Promise<void>;
    /**
     * 新增|修改|删除 之前的操作
     * @param data 对应数据
     */
    modifyBefore(data: any, type: 'delete' | 'update' | 'add'): Promise<void>;
    /**
     * 新增
     * @param param
     * @returns
     */
    add(param: any): Promise<{
        id: any;
    }>;
    /**
     * 新增|修改
     * @param param 数据
     */
    addOrUpdate(param: any | any[]): Promise<void>;
    /**
     * 删除
     * @param ids 删除的ID集合 如：[1,2,3] 或者 1,2,3
     */
    delete(ids: any): Promise<void>;
    /**
     * 软删除
     * @param ids 删除的ID数组
     * @param entity 实体
     */
    softDelete(ids: string[], entity?: Repository<any>, userId?: string): Promise<void>;
    /**
     * 修改
     * @param param 数据
     */
    update(param: any): Promise<void>;
    /**
     * 获得单个ID
     * @param id ID
     */
    info(id: any): Promise<any>;
    /**
     * 构建查询配置
     * @param query 前端查询
     * @param option
     */
    private getOptionFind;
}
