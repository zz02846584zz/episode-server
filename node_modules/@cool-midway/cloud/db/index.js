"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolCloudDb = void 0;
const core_1 = require("@cool-midway/core");
const source_1 = require("./source");
const core_2 = require("@midwayjs/core");
const ts = require("typescript");
const _ = require("lodash");
/**
 * 数据库
 */
let CoolCloudDb = class CoolCloudDb {
    async init() {
        const config = this.config.typeorm.dataSource.default;
        if (!config) {
            throw new core_1.CoolCommException('未配置数据库default信息');
        }
        this.coolDataSource = new source_1.CoolDataSource({
            ...this.config.typeorm.dataSource.default,
            entities: [],
        });
        // 连接数据库
        await this.coolDataSource.initialize();
    }
    /**
     * 获得数据库操作实例
     * @param tableClass 表类
     * @param appId 应用ID
     * @returns
     */
    getRepository(tableClass, appId = 'CLOUD') {
        return this.coolDataSource.getRepository(`${tableClass}${appId}`);
    }
    /**
     * 创建表
     * @param table 表结构，元函数，字符串
     * @param appId 应用ID，确保每个应用的数据隔离
     * @param synchronize 是否同步表结构
     */
    async createTable(table, synchronize = false, appId = 'CLOUD') {
        if (!table || !appId) {
            throw new core_1.CoolCommException('table、appId不能为空');
        }
        const { newCode, className } = this.parseCode(table, appId);
        const entities = this.coolDataSource.options.entities;
        // @ts-ignore
        this.coolDataSource.options.entities = _.dropWhile(entities, {
            name: className,
        });
        const code = ts.transpile(`${newCode}
        this.coolDataSource.options.entities.push(${className})

        this.coolDataSource.buildMetadatas().then(() => {
            if(synchronize){
               this.coolDataSource.synchronize();
            }
        });
        `, {
            emitDecoratorMetadata: true,
            module: ts.ModuleKind.CommonJS,
            target: ts.ScriptTarget.ES2018,
            removeComments: true,
            experimentalDecorators: true,
            noImplicitThis: true,
            noUnusedLocals: true,
            stripInternal: true,
            skipLibCheck: true,
            pretty: true,
            declaration: true,
            noImplicitAny: false,
        });
        eval(code);
    }
    /**
     * 根据字符串查找并生成一个跟appId相关的类名
     * @param code 代码
     * @param appId
     */
    parseCode(code, appId = 'CLOUD') {
        try {
            const oldClassName = code
                .match('class(.*)extends')[1]
                .replace(/\s*/g, '');
            const oldTableStart = code.indexOf('@Entity(');
            const oldTableEnd = code.indexOf(')');
            const oldTableName = code
                .substring(oldTableStart + 9, oldTableEnd - 1)
                .replace(/\s*/g, '')
                // eslint-disable-next-line no-useless-escape
                .replace(/\"/g, '')
                // eslint-disable-next-line no-useless-escape
                .replace(/\'/g, '');
            const className = `${oldClassName}${appId}`;
            return {
                newCode: code
                    .replace(oldClassName, className)
                    .replace(oldTableName, `func_${oldTableName}`),
                className,
                tableName: `func_${oldTableName}`,
            };
        }
        catch (err) {
            this.coreLogger.error(err);
            throw new core_1.CoolCommException('代码结构不正确，请检查');
        }
    }
};
__decorate([
    (0, core_2.Logger)(),
    __metadata("design:type", Object)
], CoolCloudDb.prototype, "coreLogger", void 0);
__decorate([
    (0, core_2.Config)(core_2.ALL),
    __metadata("design:type", Object)
], CoolCloudDb.prototype, "config", void 0);
__decorate([
    (0, core_2.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolCloudDb.prototype, "init", null);
CoolCloudDb = __decorate([
    (0, core_2.Provide)(),
    (0, core_2.Scope)(core_2.ScopeEnum.Singleton)
], CoolCloudDb);
exports.CoolCloudDb = CoolCloudDb;
