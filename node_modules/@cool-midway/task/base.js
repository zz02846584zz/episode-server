"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCoolQueue = void 0;
/**
 * 队列基类
 */
class BaseCoolQueue {
    constructor() {
        this.queue = this;
    }
    // 数据
    async data(job, done) { }
    /**
     * 发送数据
     * @param data
     * @param opts
     */
    async add(data, opts) {
        return this.metaQueue.add(this.queueName, data, opts);
    }
    /**
     * 批量新增
     * @param datas
     * @param opts
     */
    async addBulk(datas, opts) {
        return this.metaQueue.addBulk(datas.map(data => {
            return {
                name: this.queueName,
                data,
                opts,
            };
        }));
    }
    defaultJobOptions() {
        return this.metaQueue.defaultJobOptions;
    }
    async repeat() {
        return this.metaQueue.repeat;
    }
    async pause() {
        this.metaQueue.pause();
    }
    async resume() {
        this.metaQueue.resume();
    }
    async isPaused() {
        return this.metaQueue.isPaused();
    }
    async getRepeatableJobs(start, end, asc) {
        return this.metaQueue.getRepeatableJobs(start, end, asc);
    }
    async removeRepeatable(repeatOpts, jobId) {
        this.metaQueue.removeRepeatable(this.queueName, repeatOpts, jobId);
    }
    async removeRepeatableByKey(key) {
        this.metaQueue.removeRepeatableByKey(key);
    }
    async remove(jobId) {
        return this.metaQueue.remove(jobId);
    }
    async drain(delayed) {
        this.metaQueue.drain(delayed);
    }
    async clean(grace, limit, type) {
        return this.metaQueue.clean(grace, limit, type);
    }
    async obliterate(opts) {
        this.metaQueue.obliterate(opts);
    }
    async trimEvents(maxLength) {
        return this.metaQueue.trimEvents(maxLength);
    }
}
exports.BaseCoolQueue = BaseCoolQueue;
