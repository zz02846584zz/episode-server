"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolQueueHandle = void 0;
const decorator_1 = require("@midwayjs/decorator");
const bullmq_1 = require("bullmq");
const queue_1 = require("./decorator/queue");
const ioredis_1 = require("ioredis");
/**
 * 任务队列
 */
let CoolQueueHandle = class CoolQueueHandle {
    async init() {
        if (!this.redisConfig) {
            this.coreLogger.error('@cool-midway/task组件 redis未配置');
        }
        await this.scan();
    }
    /**
     * 扫描队列
     */
    async scan() {
        const modules = (0, decorator_1.listModule)(queue_1.COOL_TASK_KEY);
        for (let mod of modules) {
            const cls = await this.app
                .getApplicationContext()
                .getAsync(mod);
            this.createQueue(cls, mod);
        }
    }
    /**
     * 获得锁
     * @param key 键
     * @param expireTime 过期时间
     * @returns
     */
    async getLock(key, expireTime) {
        const lockSuccessful = await this.redis.setnx(key, 'locked');
        if (lockSuccessful) {
            await this.redis.expire(key, expireTime);
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * 队列名称
     * @param cls
     * @param mod
     */
    async createQueue(cls, mod) {
        this.redis;
        if (this.redisConfig instanceof Array) {
            this.redis = new ioredis_1.default.Cluster(this.redisConfig, {
                enableReadyCheck: false,
            });
        }
        else {
            this.redis = new ioredis_1.default({
                ...this.redisConfig,
                enableReadyCheck: false,
                maxRetriesPerRequest: null,
            });
        }
        const name = mod.name;
        const config = (0, decorator_1.getClassMetadata)(queue_1.COOL_TASK_KEY, mod);
        const opts = {
            connection: this.redis,
            prefix: `{queue${name}}`,
            defaultJobOptions: {
                removeOnComplete: true,
                removeOnFail: true,
                attempts: 5,
                backoff: {
                    type: 'fixed',
                    delay: 10000,
                },
                ...(config.queue || {}),
            },
        };
        const queue = new bullmq_1.Queue(name, opts);
        cls.metaQueue = queue;
        cls.queueName = name;
        let lock = false;
        // 本地开发的情况下直接获得锁
        if (config.type == 'single') {
            if (this.app.getEnv() == 'local') {
                lock = true;
            }
            else {
                // cluster 需要配合redis 获得锁
                if (await this.getLock('COOL_QUEUE_SINGLE', 15)) {
                    lock = true;
                }
            }
        }
        if (config.type == 'comm' || (config.type == 'single' && lock)) {
            cls.worker = new bullmq_1.Worker(name, async (job) => {
                await cls.data(job, async () => {
                    await job.isCompleted();
                });
            }, {
                connection: opts.connection,
                prefix: opts.prefix,
                ...(config.worker || {}),
            });
        }
        else {
            cls.getters = new bullmq_1.QueueGetters(name, opts);
        }
        this.coreLogger.info(`\x1B[36m [cool:task] create ${name} queue \x1B[0m`);
    }
};
__decorate([
    (0, decorator_1.Config)('cool.redis'),
    __metadata("design:type", Object)
], CoolQueueHandle.prototype, "redisConfig", void 0);
__decorate([
    (0, decorator_1.Logger)(),
    __metadata("design:type", Object)
], CoolQueueHandle.prototype, "coreLogger", void 0);
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], CoolQueueHandle.prototype, "app", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolQueueHandle.prototype, "init", null);
CoolQueueHandle = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(decorator_1.ScopeEnum.Singleton)
], CoolQueueHandle);
exports.CoolQueueHandle = CoolQueueHandle;
