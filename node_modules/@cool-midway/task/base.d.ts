import { Job, JobsOptions, Queue, QueueGetters, RepeatOptions, Worker } from 'bullmq';
/**
 * 队列基类
 */
export declare abstract class BaseCoolQueue {
    /**
     * @deprecated 将在后续版本废弃
     */
    queue: BaseCoolQueue;
    getters: QueueGetters<any, any, any>;
    worker: Worker;
    queueName: string;
    metaQueue: Queue;
    constructor();
    data(job: Job, done: Function): Promise<void>;
    /**
     * 发送数据
     * @param data
     * @param opts
     */
    add(data: any, opts?: JobsOptions): Promise<Job<any, any, string>>;
    /**
     * 批量新增
     * @param datas
     * @param opts
     */
    addBulk(datas: any[], opts?: JobsOptions): Promise<Job<any, any, string>[]>;
    defaultJobOptions(): JobsOptions;
    repeat(): Promise<import("bullmq").Repeat>;
    pause(): Promise<void>;
    resume(): Promise<void>;
    isPaused(): Promise<boolean>;
    getRepeatableJobs(start?: number, end?: number, asc?: boolean): Promise<{
        key: string;
        name: string;
        id: string;
        endDate: number;
        tz: string;
        pattern: string;
        next: number;
    }[]>;
    removeRepeatable(repeatOpts: RepeatOptions, jobId?: string): Promise<void>;
    removeRepeatableByKey(key: string): Promise<void>;
    remove(jobId: string): Promise<number>;
    drain(delayed?: boolean): Promise<void>;
    clean(grace: number, limit: number, type?: 'completed' | 'wait' | 'active' | 'paused' | 'delayed' | 'failed'): Promise<string[]>;
    obliterate(opts?: {
        force?: boolean;
        count?: number;
    }): Promise<void>;
    trimEvents(maxLength: number): Promise<number>;
}
