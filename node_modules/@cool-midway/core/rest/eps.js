"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolEps = void 0;
const decorator_1 = require("@midwayjs/decorator");
const _ = require("lodash");
const core_1 = require("@midwayjs/core");
const typeorm_1 = require("@midwayjs/typeorm");
/**
 * 实体路径
 */
let CoolEps = class CoolEps {
    constructor() {
        this.admin = {};
        this.app = {};
    }
    // @Init()
    async init() {
        var _a;
        const entitys = await this.entity();
        const controllers = await this.controller();
        const routers = await this.router();
        const adminArr = [];
        const appArr = [];
        for (const controller of controllers) {
            const { prefix, module, curdOption } = controller;
            const name = (_a = curdOption === null || curdOption === void 0 ? void 0 : curdOption.entity) === null || _a === void 0 ? void 0 : _a.name;
            (_.startsWith(prefix, "/admin/") ? adminArr : appArr).push({
                module,
                api: routers[prefix],
                name,
                columns: entitys[name] || [],
                prefix,
            });
        }
        this.admin = _.groupBy(adminArr, "module");
        this.app = _.groupBy(appArr, "module");
    }
    /**
     * 所有controller
     * @returns
     */
    async controller() {
        const result = [];
        const controllers = (0, decorator_1.listModule)(decorator_1.CONTROLLER_KEY);
        for (const controller of controllers) {
            result.push((0, decorator_1.getClassMetadata)(decorator_1.CONTROLLER_KEY, controller));
        }
        return result;
    }
    /**
     * 所有路由
     * @returns
     */
    async router() {
        return _.groupBy((await await this.midwayWebRouterService.getFlattenRouterTable()).map((item) => {
            return {
                method: item.requestMethod,
                path: item.url,
                summary: item.summary,
                dts: {},
                tag: "",
                prefix: item.prefix,
            };
        }), "prefix");
    }
    /**
     * 所有实体
     * @returns
     */
    async entity() {
        const result = {};
        const dataSourceNames = this.typeORMDataSourceManager.getDataSourceNames();
        for (const dataSourceName of dataSourceNames) {
            const entityMetadatas = await this.typeORMDataSourceManager.getDataSource(dataSourceName).entityMetadatas;
            for (const entityMetadata of entityMetadatas) {
                const commColums = [];
                let columns = entityMetadata.columns;
                columns = _.filter(columns.map((e) => {
                    return {
                        propertyName: e.propertyName,
                        type: typeof e.type == "string" ? e.type : e.type.name.toLowerCase(),
                        length: e.length,
                        comment: e.comment,
                        nullable: e.isNullable,
                    };
                }), (o) => {
                    if (["createTime", "updateTime"].includes(o.propertyName)) {
                        commColums.push(o);
                    }
                    return o && !["createTime", "updateTime"].includes(o.propertyName);
                }).concat(commColums);
                result[entityMetadata.name] = columns;
            }
        }
        return result;
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_1.MidwayWebRouterService)
], CoolEps.prototype, "midwayWebRouterService", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", typeorm_1.TypeORMDataSourceManager)
], CoolEps.prototype, "typeORMDataSourceManager", void 0);
CoolEps = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(decorator_1.ScopeEnum.Singleton)
], CoolEps);
exports.CoolEps = CoolEps;
//# sourceMappingURL=eps.js.map