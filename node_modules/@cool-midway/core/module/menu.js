"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolModuleMenu = void 0;
const core_1 = require("@midwayjs/core");
const fs = require("fs");
const config_1 = require("./config");
const path = require("path");
const event_1 = require("../event");
/**
 * 菜单
 */
let CoolModuleMenu = class CoolModuleMenu {
    async init() {
        // 是否需要导入
        if (this.coolConfig.initMenu) {
            const modules = this.coolModuleConfig.modules;
            const importLockPath = path.join(`${this.app.getBaseDir()}`, "..", "lock");
            if (!fs.existsSync(importLockPath)) {
                fs.mkdirSync(importLockPath);
            }
            for (const module of modules) {
                const lockPath = path.join(importLockPath, module + ".menu.lock");
                if (!fs.existsSync(lockPath)) {
                    await this.importMenu(module, lockPath);
                }
            }
            this.coolEventManager.emit("onMenuInit", {});
        }
    }
    /**
     * 导入菜单
     * @param module
     * @param lockPath
     */
    async importMenu(module, lockPath) {
        // 模块路径
        const modulePath = `${this.app.getBaseDir()}/modules/${module}`;
        // json 路径
        const menuPath = `${modulePath}/menu.json`;
        // 导入
        if (fs.existsSync(menuPath)) {
            const data = fs.readFileSync(menuPath);
            try {
                this.coolEventManager.emit("onMenuImport", module, JSON.parse(data.toString()));
                fs.writeFileSync(lockPath, data);
            }
            catch (error) {
                this.coreLogger.error(error);
                this.coreLogger.error(`自动初始化模块[${module}]菜单失败，请检查对应的数据结构是否正确`);
            }
        }
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", config_1.CoolModuleConfig)
], CoolModuleMenu.prototype, "coolModuleConfig", void 0);
__decorate([
    (0, core_1.Config)("cool"),
    __metadata("design:type", Object)
], CoolModuleMenu.prototype, "coolConfig", void 0);
__decorate([
    (0, core_1.App)(),
    __metadata("design:type", Object)
], CoolModuleMenu.prototype, "app", void 0);
__decorate([
    (0, core_1.Logger)(),
    __metadata("design:type", Object)
], CoolModuleMenu.prototype, "coreLogger", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", event_1.CoolEventManager)
], CoolModuleMenu.prototype, "coolEventManager", void 0);
CoolModuleMenu = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], CoolModuleMenu);
exports.CoolModuleMenu = CoolModuleMenu;
//# sourceMappingURL=menu.js.map