"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolModuleImport = void 0;
const decorator_1 = require("@midwayjs/decorator");
const core_1 = require("../exception/core");
const Importer = require("mysql2-import");
const fs = require("fs");
const config_1 = require("./config");
const path = require("path");
const typeorm_1 = require("@midwayjs/typeorm");
const typeorm_2 = require("typeorm");
const event_1 = require("../event");
const menu_1 = require("./menu");
/**
 * 模块sql
 */
let CoolModuleImport = class CoolModuleImport {
    async init() {
        // 是否需要导入
        if (this.coolConfig.initDB) {
            await this.checkDbVersion();
            const modules = this.coolModuleConfig.modules;
            const importLockPath = path.join(`${this.app.getBaseDir()}`, "..", "lock");
            if (!fs.existsSync(importLockPath)) {
                fs.mkdirSync(importLockPath);
            }
            setTimeout(async () => {
                for (const module of modules) {
                    const lockPath = path.join(importLockPath, module + ".sql.lock");
                    if (!fs.existsSync(lockPath)) {
                        await this.initDataBase(module, lockPath);
                    }
                }
                this.coolEventManager.emit("onDBInit", {});
                this.coolModuleMenu.init();
            }, 2000);
        }
    }
    /**
     * 导入数据库
     * @param module
     * @param lockPath 锁定导入
     */
    async initDataBase(module, lockPath) {
        var _a;
        // 模块路径
        const modulePath = `${this.app.getBaseDir()}/modules/${module}`;
        // sql 路径
        const sqlPath = `${modulePath}/init.sql`;
        // 延迟2秒再导入数据库
        if (fs.existsSync(sqlPath)) {
            let second = 0;
            const t = setInterval(() => {
                this.coreLogger.info("\x1B[36m [cool:core] midwayjs cool core init " +
                    module +
                    " database... \x1B[0m");
                second++;
            }, 1000);
            const { host, username, password, database, charset, port } = ((_a = this
                .ormConfig) === null || _a === void 0 ? void 0 : _a.default)
                ? this.ormConfig.default
                : this.ormConfig;
            const importer = new Importer({
                host,
                password,
                database,
                charset,
                port,
                user: username,
            });
            await importer
                .import(sqlPath)
                .then(async () => {
                clearInterval(t);
                this.coreLogger.info("\x1B[36m [cool:core] midwayjs cool core init " +
                    module +
                    " database complete \x1B[0m");
                fs.writeFileSync(lockPath, `time consuming：${second}s`);
            })
                .catch((err) => {
                clearTimeout(t);
                this.coreLogger.error("\x1B[36m [cool:core] midwayjs cool core init " +
                    module +
                    " database err please manual import \x1B[0m");
                fs.writeFileSync(lockPath, `time consuming：${second}s`);
                this.coreLogger.error(err);
                this.coreLogger.error(`自动初始化模块[${module}]数据库失败，尝试手动导入数据库`);
            });
        }
    }
    /**
     * 检查数据库版本
     */
    async checkDbVersion() {
        const versions = (await this.defaultDataSource.query("SELECT VERSION() AS version"))[0].version.split(".");
        if ((versions[0] == 5 && versions[1] < 7) || versions[0] < 5) {
            throw new core_1.CoolCoreException("数据库不满足要求：mysql>=5.7，请升级数据库版本");
        }
    }
};
__decorate([
    (0, decorator_1.Config)("typeorm.dataSource"),
    __metadata("design:type", Object)
], CoolModuleImport.prototype, "ormConfig", void 0);
__decorate([
    (0, typeorm_1.InjectDataSource)("default"),
    __metadata("design:type", typeorm_2.DataSource)
], CoolModuleImport.prototype, "defaultDataSource", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", typeorm_1.TypeORMDataSourceManager)
], CoolModuleImport.prototype, "typeORMDataSourceManager", void 0);
__decorate([
    (0, decorator_1.Config)("cool"),
    __metadata("design:type", Object)
], CoolModuleImport.prototype, "coolConfig", void 0);
__decorate([
    (0, decorator_1.Logger)(),
    __metadata("design:type", Object)
], CoolModuleImport.prototype, "coreLogger", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", config_1.CoolModuleConfig)
], CoolModuleImport.prototype, "coolModuleConfig", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", event_1.CoolEventManager)
], CoolModuleImport.prototype, "coolEventManager", void 0);
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], CoolModuleImport.prototype, "app", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", menu_1.CoolModuleMenu)
], CoolModuleImport.prototype, "coolModuleMenu", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoolModuleImport.prototype, "init", null);
CoolModuleImport = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(decorator_1.ScopeEnum.Singleton)
], CoolModuleImport);
exports.CoolModuleImport = CoolModuleImport;
//# sourceMappingURL=import.js.map