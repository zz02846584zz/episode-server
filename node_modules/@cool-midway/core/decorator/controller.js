"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiDesc = exports.CoolController = void 0;
const decorator_1 = require("@midwayjs/decorator");
const fs = require("fs");
const _ = require("lodash");
const os = require("os");
const location_1 = require("../util/location");
// COOL的装饰器
function CoolController(curdOption, routerOptions = { middleware: [], sensitive: true }) {
    return (target) => {
        // 将装饰的类，绑定到该装饰器，用于后续能获取到 class
        (0, decorator_1.saveModule)(decorator_1.CONTROLLER_KEY, target);
        let prefix;
        if (typeof curdOption === "string") {
            prefix = curdOption;
        }
        else {
            prefix = (curdOption === null || curdOption === void 0 ? void 0 : curdOption.prefix) || "";
        }
        // 如果不存在路由前缀，那么自动根据当前文件夹路径
        location_1.default.scriptPath(target).then(async (res) => {
            const pathSps = res.path.split(".");
            const paths = pathSps[pathSps.length - 2].split("/");
            const pathArr = [];
            let module = null;
            for (const path of paths.reverse()) {
                if (path != "controller" && !module) {
                    pathArr.push(path);
                }
                if (path == "controller" && !paths.includes("modules")) {
                    break;
                }
                if (path == "controller" && paths.includes("modules")) {
                    module = "ready";
                }
                if (module && path != "controller") {
                    module = `${path}`;
                    break;
                }
            }
            if (module) {
                pathArr.reverse();
                pathArr.splice(1, 0, module);
                // 追加模块中间件
                let path = `${res.path.split(`modules/${module}`)[0]}modules/${module}/config.${_.endsWith(res.path, "ts") ? "ts" : "js"}`;
                if (os.type() == "Windows_NT") {
                    path = path.substr(1);
                }
                if (fs.existsSync(path)) {
                    const config = require(path).default();
                    routerOptions.middleware = (config.middlewares || []).concat(routerOptions.middleware || []);
                }
            }
            if (!prefix) {
                prefix = `/${pathArr.join("/")}`;
            }
            saveMetadata(prefix, routerOptions, target, curdOption, module);
        });
    };
}
exports.CoolController = CoolController;
exports.apiDesc = {
    add: "新增",
    delete: "删除",
    update: "修改",
    page: "分页查询",
    list: "列表查询",
    info: "单个信息",
};
// 保存一些元数据信息，任意你希望存的东西
function saveMetadata(prefix, routerOptions, target, curdOption, module) {
    if (module && !routerOptions.tagName) {
        routerOptions = routerOptions || {};
        routerOptions.tagName = module;
    }
    (0, decorator_1.saveClassMetadata)(decorator_1.CONTROLLER_KEY, {
        prefix,
        routerOptions,
        curdOption,
        module,
    }, target);
    // 追加CRUD路由
    if (!_.isEmpty(curdOption === null || curdOption === void 0 ? void 0 : curdOption.api)) {
        curdOption === null || curdOption === void 0 ? void 0 : curdOption.api.forEach((path) => {
            (0, decorator_1.attachClassMetadata)(decorator_1.WEB_ROUTER_KEY, {
                path: `/${path}`,
                requestMethod: path == "info" ? "get" : "post",
                method: path,
                summary: exports.apiDesc[path],
                description: "",
            }, target);
        });
        (0, decorator_1.Scope)(decorator_1.ScopeEnum.Request)(target);
    }
}
//# sourceMappingURL=controller.js.map